import Post from '../models/post.model.js';
import User from '../models/user.model.js';
import { SharePost } from '../models/sharedPost.model.js';
import { uploadImageService } from "./upload.service.js";
import cloudinary from "../config/cloudinary.js";
import redisClient from "../config/redisClient.js";
import LikePost from "../models/likePost.model.js";

/**
 * T·∫°o b√†i vi·∫øt m·ªõi
 * @param {string} userId - ID c·ªßa ng∆∞·ªùi ƒëƒÉng b√†i
 * @param {Object} data - D·ªØ li·ªáu b√†i vi·∫øt
 * @param {string} data.content - N·ªôi dung b√†i vi·∫øt
 * @param {Buffer} data.imageBuffer - ·∫¢nh b√†i vi·∫øt (d·∫°ng Buffer)
 * @param {string} data.imageMimetype - Lo·∫°i ·∫£nh (image/png, image/jpeg, ...)
 * @returns {Promise<Object>} - B√†i vi·∫øt ƒë√£ t·∫°o
 */
export const createPostService = async (userId, title, content, imageBuffer) => {
    const user = await User.findById(userId);
    if (!user) throw new Error("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!");

    if (!title || (!content && !imageBuffer)) {
        throw new Error("B√†i ƒëƒÉng ph·∫£i c√≥ ti√™u ƒë·ªÅ v√† √≠t nh·∫•t n·ªôi dung ho·∫∑c ·∫£nh!");
    }

    let imageUrl = "";
    if (imageBuffer) {
        imageUrl = await uploadImageService(imageBuffer);
    }

    const newPost = await Post.create({
        user: userId,
        title,
        content,
        image: imageUrl,
    });

    user.posts.push(newPost._id);
    await user.save();

    // Cache b√†i vi·∫øt m·ªõi ngay l·∫≠p t·ª©c
    await redisClient.set(`post:${newPost._id}`, JSON.stringify(newPost), { EX: 600 });

    return newPost;
};


export const getOwnPostsService = async (userId) => {
    const user = await User.findById(userId);
    if (!user) throw new Error("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!");

    // L·∫•y danh s√°ch b√†i vi·∫øt v√† populate th√™m th√¥ng tin user
    const posts = await Post.find({ user: userId })
        .populate("user", "username profilePicture") // L·∫•y th√¥ng tin user
        .sort({ createdAt: -1 }) // S·∫Øp x·∫øp b√†i ƒëƒÉng m·ªõi nh·∫•t l√™n ƒë·∫ßu
        .lean();

    return posts;
};

export const updatePostService = async (userId, postId, title, content, imageBuffer, caption) => {
    const user = await User.findById(userId);
    if (!user) throw new Error("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!");

    let post = await Post.findById(postId);
    let postType = "Post";

    // N·∫øu kh√¥ng t√¨m th·∫•y trong Post, ki·ªÉm tra trong SharePost
    if (!post) {
        post = await SharePost.findById(postId);
        postType = "SharePost";
    }

    if (!post) throw new Error("B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i!");

    // Ki·ªÉm tra quy·ªÅn ch·ªânh s·ª≠a b√†i vi·∫øt
    if (post.user.toString() !== userId.toString()) {
        throw new Error("B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a b√†i vi·∫øt n√†y!");
    }

    if (postType === "Post") {
        let imageUrl = post.image; // Gi·ªØ ·∫£nh c≈© n·∫øu kh√¥ng c√≥ ·∫£nh m·ªõi

        if (imageBuffer) {
            // üîπ X√≥a ·∫£nh c≈© tr√™n Cloudinary tr∆∞·ªõc khi upload ·∫£nh m·ªõi
            if (post.image) {
                try {
                    // L·∫•y public_id t·ª´ URL ·∫£nh c≈©
                    const publicId = post.image.split("/").pop().split(".")[0]; 
                    console.log("X√≥a ·∫£nh c≈©:", publicId);

                    await cloudinary.uploader.destroy(`post_images/${publicId}`);
                    console.log("·∫¢nh c≈© ƒë√£ x√≥a th√†nh c√¥ng!");
                } catch (error) {
                    console.error("L·ªói khi x√≥a ·∫£nh c≈©:", error);
                }
            }

            // Upload ·∫£nh m·ªõi
            console.log("Uploading new image...");
            imageUrl = await uploadImageService(imageBuffer);
            console.log("New image URL:", imageUrl);

            if (!imageUrl) {
                throw new Error("L·ªói khi t·∫£i ·∫£nh l√™n, vui l√≤ng th·ª≠ l·∫°i!");
            }
        }

        // C·∫≠p nh·∫≠t Post
        post = await Post.findByIdAndUpdate(
            postId,
            { 
                title, 
                content, 
                image: imageUrl ?? post.image  
            },
            { new: true }
        );

    } else if (postType === "SharePost") {
        // C·∫≠p nh·∫≠t SharePost (ch·ªâ c·∫≠p nh·∫≠t caption)
        post = await SharePost.findByIdAndUpdate(
            postId,
            { caption },
            { new: true }
        );
    }

    // X√≥a cache Redis
    await redisClient.del(`post:${postId}`);

    return post;
};


export const deletePostService = async (userId, postId) => {
    const user = await User.findById(userId);
    if (!user) throw new Error("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!");

    let post = await Post.findById(postId);
    let postType = "Post";

    // N·∫øu kh√¥ng t√¨m th·∫•y trong Post, ki·ªÉm tra trong SharePost
    if (!post) {
        post = await SharePost.findById(postId);
        postType = "SharePost";
    }

    if (!post) throw new Error("B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i!");

    // Ki·ªÉm tra quy·ªÅn x√≥a b√†i vi·∫øt
    if (post.user.toString() !== userId.toString()) {
        throw new Error("B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a b√†i vi·∫øt n√†y!");
    }

    // N·∫øu l√† b√†i vi·∫øt g·ªëc (Post) ‚Üí X√≥a ·∫£nh tr√™n Cloudinary tr∆∞·ªõc khi x√≥a b√†i vi·∫øt
    if (postType === "Post" && post.image) {
        try {
            const publicId = post.image.split("/").pop().split(".")[0];
            console.log("X√≥a ·∫£nh c≈© tr√™n Cloudinary:", publicId);
            await cloudinary.uploader.destroy(`post_images/${publicId}`);
        } catch (error) {
            console.error("L·ªói khi x√≥a ·∫£nh tr√™n Cloudinary:", error);
        }
    }

    // X√≥a b√†i vi·∫øt kh·ªèi danh s√°ch c·ªßa user
    user.posts = user.posts.filter(id => id.toString() !== postId.toString());
    await user.save();

    // X√≥a b√†i vi·∫øt
    await post.deleteOne();
    
    // X√≥a cache Redis li√™n quan
    await redisClient.del(`post:${postId}`);

    return { message: "B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!" };
};


export const sharePostService = async (userId, postId, caption, visibility) => {
    let post = await Post.findById(postId);
    let sharePost = await SharePost.findById(postId);
    let originalPostId, originalPostModel;

    if (post) {
        originalPostId = postId;
        originalPostModel = "Post";
    } else if (sharePost) {
        originalPostId = sharePost.originalPost;
        originalPostModel = sharePost.originalPostModel;
    } else {
        throw new Error("B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i!");
    }

    console.log("üîÑ T·∫°o SharePost v·ªõi visibility:", visibility);

    const newSharedPost = new SharePost({
        user: userId,
        originalPost: originalPostId,
        originalPostModel: originalPostModel,
        caption: caption,
        visibility: visibility 
    });

    await newSharedPost.save();

    return newSharedPost;
};


export const getAllPostsService = async (userId, page = 1, limit = 10) => {
    try {
        // console.log(`Truy v·∫•n danh s√°ch b√†i vi·∫øt... Trang: ${page}, Gi·ªõi h·∫°n: ${limit}`);

        const skip = (page - 1) * limit;

        // L·∫•y danh s√°ch t·∫•t c·∫£ b√†i Post
        const posts = await Post.find()
            .populate("user", "id username profilePicture")
            .sort({ createdAt: -1 })
            .skip(skip)
            .limit(limit)
            .lean();

        // L·∫•y danh s√°ch t·∫•t c·∫£ SharePost
        const sharedPosts = await SharePost.find()
            .populate("user", "id username profilePicture")
            .populate("originalPost", "title content image user createdAt")
            .populate({
                path: "originalPost",
                populate: { path: "user", select: "username profilePicture" }
            })
            .sort({ createdAt: -1 })
            .skip(skip)
            .limit(limit)
            .lean();

        // G·ªôp t·∫•t c·∫£ b√†i vi·∫øt & s·∫Øp x·∫øp theo th·ªùi gian
        const allPosts = [...posts, ...sharedPosts].sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));

        // N·∫øu c√≥ userId, ki·ªÉm tra b√†i vi·∫øt n√†o user ƒë√£ like
        let userLikedPosts = [];
        if (userId) {
            userLikedPosts = await LikePost.find({ user: userId }).distinct("post"); // L·∫•y danh s√°ch ID c·ªßa c√°c b√†i ƒë√£ like
        }

        // G√°n th√™m isLiked v√†o t·ª´ng post
        const postsWithLikeStatus = allPosts.map(post => ({
            ...post,
            isLiked: userLikedPosts.map(id => id.toString()).includes(post._id.toString()),
        }));  

        return postsWithLikeStatus;
    } catch (error) {
        console.error("L·ªói Redis ho·∫∑c MongoDB:", error);
        throw new Error("Kh√¥ng th·ªÉ l·∫•y danh s√°ch b√†i vi·∫øt!");
    }
};



