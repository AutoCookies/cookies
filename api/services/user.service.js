import User from "../models/user.model.js";
import bcrypt from "bcryptjs";
import cloudinary from "../config/cloudinary.js";
import fs from "fs";

export const getUser = async (id, currentUser) => {
    const user = await User.findById(id).select("-password").lean();
    if (!user) throw new Error("User not found");

    if (user.visibility === "private" && currentUser._id.toString() !== id && currentUser.role !== "admin") {
        return {
            username: user.username,
            profilePicture: user.profilePicture,
            bio: user.bio,
            visibility: user.visibility
        };
    }
    return user;
};

export const changePasswordService = async (userId, currentPassword, newPassword) => {
    const user = await User.findById(userId);
    if (!user) throw new Error("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!");

    // Ki·ªÉm tra m·∫≠t kh·∫©u c≈© c√≥ ƒë√∫ng kh√¥ng
    const isMatch = await bcrypt.compare(currentPassword, user.password);
    if (!isMatch) throw new Error("M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng!");

    // Ki·ªÉm tra ƒë·ªô d√†i m·∫≠t kh·∫©u m·ªõi
    if (newPassword.length < 6) {
        throw new Error("M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±!");
    }

    // Hash m·∫≠t kh·∫©u m·ªõi v√† c·∫≠p nh·∫≠t v√†o DB
    user.password = newPassword;
    user.passwordChangedAt = new Date();
    await user.save();

    return { message: "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!" };
};

export const changeUserNameService = async (userId, newUsername) => {
    const user = await User.findById(userId);
    if (!user) throw new Error("User does not exist");

    user.username = newUsername;
    await user.save();
    
    return { message: "Username updated successfully!" };
};

export const changeUserFullnameService = async ( userId, newFullName ) => {
    const user = await User.findById(userId);
    if (!user) throw new Error("User does not exist");

    user.fullName = newFullName;
    await user.save();

    return { message: "Email updated successfully!" };
}

export const changeUserPhoneNumberService = async ( userId, newUserPhoneNumber ) => {
    const user = await User.findById(userId);
    if (!user) throw new Error("User does not exist");

    user.phoneNumber = newUserPhoneNumber;
    await user.save();

    return { message: "Phone number changed successfully" }
}

export const updateProfilePictureService = async (userId, filePath) => {
    try {
        if (!fs.existsSync(filePath)) {
            throw new Error(`File kh√¥ng t·ªìn t·∫°i: ${filePath}`);
        }

        console.log("B·∫Øt ƒë·∫ßu upload file t·ª´:", filePath);

        const result = await cloudinary.uploader.upload(filePath, {
            folder: "user_profiles",
            transformation: [{ width: 500, height: 500, crop: "limit" }]
        });

        if (!result.secure_url) {
            throw new Error("Kh√¥ng th·ªÉ upload ·∫£nh!");
        }

        console.log("Upload th√†nh c√¥ng:", result.secure_url);

        // X√≥a file t·∫°m
        fs.unlink(filePath, (err) => {
            if (err) console.error("L·ªói khi x√≥a file:", err);
            else console.log("üóë File t·∫°m ƒë√£ x√≥a:", filePath);
        });

        // C·∫≠p nh·∫≠t v√†o database
        const user = await User.findByIdAndUpdate(
            userId, 
            { profilePicture: result.secure_url }, 
            { new: true }
        );

        console.log("C·∫≠p nh·∫≠t profilePicture th√†nh c√¥ng cho user:", userId);

        return {
            message: "·∫¢nh ƒë·∫°i di·ªán ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!",
            profilePicture: user.profilePicture
        };
    } catch (error) {
        console.error("L·ªói trong updateProfilePictureService:", error);
        throw error;
    }
};


export const getProfilePictureService = (user) => {
    if (!user || !user.profilePicture) {
        return { profilePicture: null };
    }
    return { profilePicture: user.profilePicture };
};



