import Post from '../models/post.model.js';
import User from '../models/user.model.js';
import { SharePost } from '../models/sharedPost.model.js';
import { uploadImageService } from "./upload.service.js";
import cloudinary from "../config/cloudinary.js";

/**
 * T·∫°o b√†i vi·∫øt m·ªõi
 * @param {string} userId - ID c·ªßa ng∆∞·ªùi ƒëƒÉng b√†i
 * @param {Object} data - D·ªØ li·ªáu b√†i vi·∫øt
 * @param {string} data.content - N·ªôi dung b√†i vi·∫øt
 * @param {Buffer} data.imageBuffer - ·∫¢nh b√†i vi·∫øt (d·∫°ng Buffer)
 * @param {string} data.imageMimetype - Lo·∫°i ·∫£nh (image/png, image/jpeg, ...)
 * @returns {Promise<Object>} - B√†i vi·∫øt ƒë√£ t·∫°o
 */
export const createPostService = async (userId, title, content, imageBuffer) => {
    const user = await User.findById(userId);
    if (!user) throw new Error("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!");

    if (!title || (!content && !imageBuffer)) {
        throw new Error("B√†i ƒëƒÉng ph·∫£i c√≥ ti√™u ƒë·ªÅ v√† √≠t nh·∫•t n·ªôi dung ho·∫∑c ·∫£nh!");
    }

    let imageUrl = "";
    if (imageBuffer) {
        imageUrl = await uploadImageService(imageBuffer);
    }

    const newPost = await Post.create({
        user: userId,
        title,
        content,
        image: imageUrl,
        likes: [],
        comments: [],
    });

    user.posts.push(newPost._id);
    await user.save();

    return newPost;
};

export const getOwnPostsService = async (userId) => {
    const user = await User.findById(userId);
    if (!user) throw new Error("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!");

    // L·∫•y danh s√°ch b√†i vi·∫øt v√† populate th√™m th√¥ng tin user
    const posts = await Post.find({ user: userId })
        .populate("user", "username profilePicture") // L·∫•y th√¥ng tin user
        .sort({ createdAt: -1 }) // S·∫Øp x·∫øp b√†i ƒëƒÉng m·ªõi nh·∫•t l√™n ƒë·∫ßu
        .lean();

    return posts;
};

export const updatePostService = async (userId, postId, title, content, imageBuffer) => {
    const user = await User.findById(userId);
    if (!user) throw new Error("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!");

    const post = await Post.findById(postId);
    if (!post) throw new Error("B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i!");

    // Ki·ªÉm tra quy·ªÅn ch·ªânh s·ª≠a b√†i vi·∫øt
    if (post.user.toString() !== userId.toString()) {
        throw new Error("B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a b√†i vi·∫øt n√†y!");
    }

    let imageUrl = post.image; // Gi·ªØ ·∫£nh c≈© n·∫øu kh√¥ng c√≥ ·∫£nh m·ªõi

    if (imageBuffer) {
        // üîπ X√≥a ·∫£nh c≈© tr√™n Cloudinary tr∆∞·ªõc khi upload ·∫£nh m·ªõi
        if (post.image) {
            try {
                // L·∫•y public_id t·ª´ URL ·∫£nh c≈©
                const publicId = post.image.split("/").pop().split(".")[0]; 
                console.log("X√≥a ·∫£nh c≈©:", publicId);

                await cloudinary.uploader.destroy(`post_images/${publicId}`);
                console.log("·∫¢nh c≈© ƒë√£ x√≥a th√†nh c√¥ng!");
            } catch (error) {
                console.error("L·ªói khi x√≥a ·∫£nh c≈©:", error);
            }
        }

        // Upload ·∫£nh m·ªõi
        console.log("Uploading new image...");
        imageUrl = await uploadImageService(imageBuffer);
        console.log("New image URL:", imageUrl);
    }

    // C·∫≠p nh·∫≠t b√†i vi·∫øt
    const updatedPost = await Post.findByIdAndUpdate(
        postId,
        { title, content, image: imageUrl },
        { new: true }
    );

    return updatedPost;
};

export const deletePostService = async (userId, postId) => {
    const user = await User.findById(userId);
    if (!user) throw new Error("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!");

    const post = await Post.findById(postId);
    if (!post) throw new Error("B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i!");

    // Ki·ªÉm tra quy·ªÅn x√≥a b√†i vi·∫øt
    if (post.user.toString() !== userId.toString()) {
        throw new Error("B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a b√†i vi·∫øt n√†y!");
    }

    // X√≥a ·∫£nh tr√™n Cloudinary tr∆∞·ªõc khi x√≥a b√†i vi·∫øt
    if (post.image) {
        try {
            const publicId = post.image.split("/").pop().split(".")[0];
            console.log("X√≥a ·∫£nh c≈© tr√™n Cloudinary:", publicId);
            await cloudinary.uploader.destroy(`post_images/${publicId}`);
        } catch (error) {
            console.error("L·ªói khi x√≥a ·∫£nh tr√™n Cloudinary:", error);
        }
    }

    // X√≥a b√†i vi·∫øt kh·ªèi danh s√°ch c·ªßa user
    user.posts = user.posts.filter(id => id.toString() !== postId.toString());
    await user.save(); // L∆∞u l·∫°i thay ƒë·ªïi

    // X√≥a b√†i vi·∫øt
    await post.deleteOne();

    return { message: "B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!" };
};


export const likePostService = async (userId, postId) => {
    const user = await User.findById(userId);
    if (!user) throw new Error("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!");

    // T√¨m trong Post tr∆∞·ªõc, n·∫øu kh√¥ng c√≥ th√¨ t√¨m trong SharePost
    let post = await Post.findById(postId) || await SharePost.findById(postId);
    if (!post) throw new Error("B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i!");

    // Ki·ªÉm tra n·∫øu user ƒë√£ like
    if (post.likes.includes(userId)) {
        throw new Error("B·∫°n ƒë√£ th√≠ch b√†i vi·∫øt n√†y r·ªìi!");
    }

    // Th√™m userId v√†o danh s√°ch likes
    post.likes.push(userId);
    user.likedPosts.push(postId);

    await post.save();
    await user.save();

    return post;
};

export const unlikePostService = async (userId, postId) => {
    const user = await User.findById(userId);
    if (!user) throw new Error("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!");

    // T√¨m trong Post tr∆∞·ªõc, n·∫øu kh√¥ng c√≥ th√¨ t√¨m trong SharePost
    let post = await Post.findById(postId) || await SharePost.findById(postId);
    if (!post) throw new Error("B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i!");

    // Ki·ªÉm tra n·∫øu user ch∆∞a like
    if (!post.likes.includes(userId)) {
        throw new Error("B·∫°n ch∆∞a th√≠ch b√†i vi·∫øt n√†y!");
    }

    // X√≥a userId kh·ªèi danh s√°ch likes
    post.likes = post.likes.filter(id => id.toString() !== userId.toString());
    user.likedPosts = user.likedPosts.filter(id => id.toString() !== postId.toString());

    await post.save();
    await user.save();

    return post;
};

export const sharePostService = async (userId, postId, caption) => {
    const post = await Post.findById(postId);
    if (!post) throw new Error("B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i!");

    // T·∫°o b·∫£n ghi chia s·∫ª
    const sharedPost = await SharePost.create({
        user: userId,
        originalPost: postId,
        caption: caption || "",
    });

    // Th√™m sharedPost v√†o danh s√°ch b√†i vi·∫øt c·ªßa user
    await User.findByIdAndUpdate(userId, {
        $push: { posts: sharedPost._id }
    });

    return sharedPost;
};

export const getAllPostsService = async () => {
    // L·∫•y t·∫•t c·∫£ b√†i vi·∫øt g·ªëc
    const posts = await Post.find()
        .populate("user", "username profilePicture") // L·∫•y th√¥ng tin ng∆∞·ªùi ƒëƒÉng b√†i
        .sort({ createdAt: -1 })
        .lean();

    // L·∫•y t·∫•t c·∫£ b√†i vi·∫øt ƒë√£ share
    const sharedPosts = await SharePost.find()
        .populate("user", "username profilePicture") // Ng∆∞·ªùi share
        .populate("originalPost", "title content image user createdAt") // Th√¥ng tin b√†i g·ªëc
        .populate({
            path: "originalPost",
            populate: { path: "user", select: "username profilePicture" } // Ng∆∞·ªùi ƒëƒÉng b√†i g·ªëc
        })
        .sort({ createdAt: -1 })
        .lean();

    // G·ªôp danh s√°ch v√† s·∫Øp x·∫øp theo th·ªùi gian
    const allPosts = [...posts, ...sharedPosts].sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));

    return allPosts;
};

export const commentPostService = async (userId, postId, text) => {
    const user = await User.findById(userId);
    if (!user) throw new Error("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!");

    if (!text.trim()) throw new Error("B√¨nh lu·∫≠n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");

    let post = await Post.findById(postId);
    let sharePost = await SharePost.findById(postId);

    if (!post && !sharePost) {
        throw new Error("B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i!");
    }

    const comment = {
        user: userId,
        text,
        createdAt: new Date(),
    };

    if (post) {
        post.comments.push(comment);
        await post.save();
    } else if (sharePost) {
        sharePost.comments.push(comment);
        await sharePost.save();
    }

    return { message: "B√¨nh lu·∫≠n ƒë√£ ƒë∆∞·ª£c th√™m!" };
};



